{"version":3,"file":"static/js/190.01a9686f.chunk.js","mappings":"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","sources":["components/Body/Profile/Profile.module.css","redux/profileSelectors.ts","components/Body/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Body/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Body/Profile/MyPosts/MyPosts.module.css?3b40","components/Body/Profile/MyPosts/NewPost/NewPost.module.css","components/Body/Profile/MyPosts/NewPost/NewPost.tsx","webpack://samurai-way/./src/components/Body/Profile/MyPosts/Post/Post.module.css?7321","components/Body/Profile/MyPosts/Post/Post.tsx","components/Body/Profile/MyPosts/MyPosts.tsx","components/Body/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__jp0a7\"};","import {AppRootStateType} from './reduxStore'\r\n\r\nexport const getPosts = (state: AppRootStateType) => state.profilePage.posts\r\nexport const getProfile = (state: AppRootStateType) => state.profilePage.profile\r\nexport const getStatus = (state: AppRootStateType) => state.profilePage.status","import React, {ChangeEvent, FocusEvent, useEffect, useState} from 'react'\r\nimport {updateStatus} from '../../../../../redux/profileReducer'\r\nimport {getStatus} from '../../../../../redux/profileSelectors'\r\nimport {useAppDispatch, useAppSelector} from '../../../../../hooks/hooks'\r\n\r\nexport const ProfileStatus = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const status = useAppSelector(getStatus)\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [value, setValue] = useState(status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = (e: FocusEvent<HTMLInputElement, Element>) => {\r\n        dispatch(updateStatus(e.currentTarget.value))\r\n        setEditMode(false)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    useEffect(() => {\r\n        setValue(status)\r\n    }, [status])\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{status || 'No Status'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <input value={value}\r\n                       onChange={onStatusChange}\r\n                       onBlur={deactivateEditMode}/>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {useAppSelector} from '../../../../hooks/hooks'\r\nimport {getProfile} from '../../../../redux/profileSelectors'\r\nimport Preload from '../../../common/Preload/Preload'\r\n\r\nimport {ProfileStatus} from './ProfileStatus/ProfileStatus'\r\n\r\nexport const ProfileInfo = () => {\r\n    const profile = useAppSelector(getProfile)\r\n\r\n    if (!profile) {\r\n        return <Preload/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img src={profile.photos.large} alt=\"avatar\"/>\r\n\r\n            <ProfileStatus/>\r\n\r\n            <h2>{profile.fullName}</h2>\r\n            <p>\r\n                <b>About me: </b>\r\n            </p>\r\n            <p>\r\n                <b>Looking for a job: </b>\r\n                {profile.lookingForAJob ? <span>{profile.lookingForAJobDescription}</span> : <span>no</span>}\r\n            </p>\r\n            <div>\r\n                <b>Contacts:</b>\r\n                {profile.contacts.facebook && <p><b>FaceBook:</b> {profile.contacts.facebook}</p>}\r\n                {profile.contacts.website && <p><b>Web-site:</b> {profile.contacts.website}</p>}\r\n                {profile.contacts.vk && <p><b>Vk:</b> {profile.contacts.vk}</p>}\r\n                {profile.contacts.twitter && <p><b>Twitter:</b> {profile.contacts.twitter}</p>}\r\n                {profile.contacts.instagram && <p><b>Instagram:</b> {profile.contacts.instagram}</p>}\r\n                {profile.contacts.youtube && <p><b>YouTube:</b> {profile.contacts.youtube}</p>}\r\n                {profile.contacts.github && <p><b>GitHub:</b> {profile.contacts.github}</p>}\r\n                {profile.contacts.mainLink && <p><b>MainLink:</b> {profile.contacts.mainLink}</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__VkFSJ\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react'\r\nimport s from './NewPost.module.css'\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form'\r\nimport {useAppDispatch} from '../../../../../hooks/hooks'\r\nimport {addPostAC} from '../../../../../redux/profileReducer'\r\nimport {Textarea} from '../../../../common/FormsControls/FormsControls'\r\nimport {maxLength300, required} from '../../../../../utils/validators/validators'\r\n\r\nexport const NewPost = () => {\r\n    const dispatch = useAppDispatch()\r\n    const addNewPost = (formData: FormDataType) => {\r\n        dispatch(addPostAC(formData.newPostText))\r\n        dispatch(reset('profileAddNewPostFormRedux'))\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <AddNewPostFormRedux onSubmit={addNewPost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'}\r\n                       component={Textarea}\r\n                       placeholder={'New post text'}\r\n                       validate={[required, maxLength300]}/>\r\n            </div>\r\n            <div>\r\n                <button>New Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'profileAddNewPostFormRedux'})(AddPostForm)","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__zTnjZ\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\nimport {useAppDispatch} from '../../../../../hooks/hooks'\r\nimport {deletePostAC} from '../../../../../redux/profileReducer'\r\n\r\ntype PostPropsType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = React.memo(({id, message, likes}) => {\r\n    const dispatch = useAppDispatch()\r\n    const onDeleteButtonClick = () => {\r\n        dispatch(deletePostAC(id))\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <img\r\n                src=\"https://sun2.beltelecom-by-minsk.userapi.com/s/v1/ig2/MqXj-7Skelx32X1KmSmMCnSC5Fi6VIPMDvj4Y0fCyy8keZMLHM2LXsmCEh55rfocJevsF7cthbjk56UqJmtgaXPM.jpg?size=200x200&quality=95&crop=295,99,996,996&ava=1\"\r\n                alt=\"\"/>\r\n            <span>{message}</span>\r\n            <span>  Likes {likes}</span>\r\n            <button onClick={onDeleteButtonClick}>X</button>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport {NewPost} from './NewPost/NewPost'\r\nimport {Post} from './Post/Post'\r\nimport {useAppSelector} from '../../../../hooks/hooks'\r\nimport {getPosts} from '../../../../redux/profileSelectors'\r\n\r\nexport const MyPosts = () => {\r\n    const posts = useAppSelector(getPosts)\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <NewPost/>\r\n            {[...posts]\r\n                .reverse()\r\n                .map(post => <Post key={post.id}\r\n                                   id={post.id}\r\n                                   message={post.message}\r\n                                   likes={post.likes}/>)\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo'\r\nimport {MyPosts} from './MyPosts/MyPosts'\r\nimport {useAppDispatch, useAppSelector} from '../../../hooks/hooks'\r\nimport {Navigate, useParams} from 'react-router-dom'\r\nimport {getStatus, getUserProfile} from '../../../redux/profileReducer'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {getIsAuth} from '../../../redux/authSelectors'\r\n\r\n\r\nexport const ProfileForRedirect = () => {\r\n    const dispatch = useAppDispatch()\r\n    const params = useParams()\r\n    const isAuth = useAppSelector(getIsAuth)\r\n\r\n    let {userId} = params\r\n    userId && dispatch(getUserProfile(+userId))\r\n    userId && dispatch(getStatus(+userId))\r\n\r\n    if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\nexport default withAuthRedirect(ProfileForRedirect)\r\n"],"names":["getPosts","state","profilePage","posts","getProfile","profile","getStatus","status","ProfileStatus","dispatch","useAppDispatch","useAppSelector","useState","editMode","setEditMode","value","setValue","useEffect","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","ProfileInfo","src","photos","large","alt","fullName","lookingForAJob","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Preload","NewPost","className","s","AddNewPostFormRedux","onSubmit","formData","addPostAC","newPostText","reset","reduxForm","form","props","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","maxLength300","Post","React","id","message","likes","onClick","deletePostAC","MyPosts","reverse","map","post","ProfileForRedirect","params","useParams","isAuth","getIsAuth","userId","getUserProfile","to","withAuthRedirect"],"sourceRoot":""}