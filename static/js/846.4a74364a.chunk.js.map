{"version":3,"file":"static/js/846.4a74364a.chunk.js","mappings":"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","sources":["components/Body/Profile/Profile.module.css","webpack://samurai-way/./src/components/Body/Profile/ProfileInfo/Profile.module.css?a3cd","redux/profileSelectors.ts","components/Body/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Body/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Body/Profile/MyPosts/MyPosts.module.css?3b40","components/Body/Profile/MyPosts/NewPost/NewPost.module.css","components/Body/Profile/MyPosts/NewPost/NewPost.tsx","webpack://samurai-way/./src/components/Body/Profile/MyPosts/Post/Post.module.css?7321","components/Body/Profile/MyPosts/Post/Post.tsx","components/Body/Profile/MyPosts/MyPosts.tsx","components/Body/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__jp0a7\"};","// extracted by mini-css-extract-plugin\nexport default {\"mainPhoto\":\"Profile_mainPhoto__9zE8L\",\"aboutMe\":\"Profile_aboutMe__yF8E5\",\"contact\":\"Profile_contact__BsWkL\"};","import {AppRootStateType} from './reduxStore'\r\n\r\nexport const getPosts = (state: AppRootStateType) => state.profilePage.posts\r\nexport const getProfile = (state: AppRootStateType) => state.profilePage.profile\r\nexport const getStatus = (state: AppRootStateType) => state.profilePage.status","import React, {ChangeEvent, FocusEvent, useState} from 'react'\r\nimport {updateStatus} from 'redux/profileReducer'\r\nimport {getStatus} from 'redux/profileSelectors'\r\nimport {useAppDispatch, useAppSelector} from 'hooks/hooks'\r\n\r\nexport const ProfileStatus = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const status = useAppSelector(getStatus)\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [value, setValue] = useState<string | null>(status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setValue(status)\r\n    }\r\n    const deactivateEditMode = (e: FocusEvent<HTMLInputElement, Element>) => {\r\n        dispatch(updateStatus(e.currentTarget.value))\r\n        setEditMode(false)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <b>Status: </b>\r\n            {!editMode &&\r\n                <span onDoubleClick={activateEditMode}>{status || 'No Status'}</span>\r\n            }\r\n            {editMode &&\r\n                <input value={value || ''}\r\n                       onChange={onStatusChange}\r\n                       onBlur={deactivateEditMode}/>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react'\r\n\r\nimport mainPhoto from 'assets/images/userPhoto.png'\r\nimport styles from './Profile.module.css'\r\nimport Preload from 'components/common/Preload/Preload'\r\nimport {getProfile} from 'redux/profileSelectors'\r\nimport {\r\n    ProfileStatus\r\n} from 'components/Body/Profile/ProfileInfo/ProfileStatus/ProfileStatus'\r\nimport {useAppDispatch, useAppSelector} from 'hooks/hooks'\r\nimport {getId} from 'redux/authSelectors'\r\nimport {useParams} from 'react-router-dom'\r\nimport {updatePhoto} from 'redux/profileReducer'\r\nimport {getProfileResponseType} from \"../../../../api/api\";\r\n\r\nexport const ProfileInfo = () => {\r\n    const dispatch = useAppDispatch()\r\n    const profile = useAppSelector(getProfile)\r\n    const authUserId = useAppSelector(getId)\r\n    const {userId} = useParams()\r\n    if (!profile) {\r\n        return <Preload/>\r\n    }\r\n\r\n    const updatePhotoHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            dispatch(updatePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img src={profile.photos.large || mainPhoto} alt=\"avatar\"\r\n                 className={styles.mainPhoto}/>\r\n            {Number(userId) === authUserId &&\r\n                <input type={'file'} onChange={updatePhotoHandle}/>}\r\n            <ProfileStatus/>\r\n\r\n            <ProfileData profile={profile}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: getProfileResponseType\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile}) => {\r\n    return (<div className={styles.aboutMe}>\r\n        <div>\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                </div>}\r\n        </div>\r\n        <b>About me:</b>\r\n        <div>\r\n            <b>Contacts:</b>\r\n            {Object.keys(profile.contacts).map((key) => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string | null\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={styles.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>)\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MyPosts_content__VkFSJ\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react'\r\nimport s from './NewPost.module.css'\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form'\r\nimport {useAppDispatch} from '../../../../../hooks/hooks'\r\nimport {addPostAC} from '../../../../../redux/profileReducer'\r\nimport {Textarea} from '../../../../common/FormsControls/FormsControls'\r\nimport {maxLength300, required} from '../../../../../utils/validators/validators'\r\n\r\nexport const NewPost = () => {\r\n    const dispatch = useAppDispatch()\r\n    const addNewPost = (formData: FormDataType) => {\r\n        dispatch(addPostAC(formData.newPostText))\r\n        dispatch(reset('profileAddNewPostFormRedux'))\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <AddNewPostFormRedux onSubmit={addNewPost}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={'newPostText'}\r\n                       component={Textarea}\r\n                       placeholder={'New post text'}\r\n                       validate={[required, maxLength300]}/>\r\n            </div>\r\n            <div>\r\n                <button>New Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<FormDataType>({form: 'profileAddNewPostFormRedux'})(AddPostForm)","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Post_content__zTnjZ\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\nimport {useAppDispatch} from '../../../../../hooks/hooks'\r\nimport {deletePostAC} from '../../../../../redux/profileReducer'\r\n\r\ntype PostPropsType = {\r\n    id: string\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = React.memo(({id, message, likes}) => {\r\n    const dispatch = useAppDispatch()\r\n    const onDeleteButtonClick = () => {\r\n        dispatch(deletePostAC(id))\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <img\r\n                src=\"https://sun2.beltelecom-by-minsk.userapi.com/s/v1/ig2/MqXj-7Skelx32X1KmSmMCnSC5Fi6VIPMDvj4Y0fCyy8keZMLHM2LXsmCEh55rfocJevsF7cthbjk56UqJmtgaXPM.jpg?size=200x200&quality=95&crop=295,99,996,996&ava=1\"\r\n                alt=\"\"/>\r\n            <span>{message}</span>\r\n            <span>  Likes {likes}</span>\r\n            <button onClick={onDeleteButtonClick}>X</button>\r\n        </div>\r\n    )\r\n})","import React from 'react'\r\nimport s from './MyPosts.module.css'\r\nimport {NewPost} from './NewPost/NewPost'\r\nimport {Post} from './Post/Post'\r\nimport {useAppSelector} from '../../../../hooks/hooks'\r\nimport {getPosts} from '../../../../redux/profileSelectors'\r\n\r\nexport const MyPosts = () => {\r\n    const posts = useAppSelector(getPosts)\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <NewPost/>\r\n            {[...posts]\r\n                .reverse()\r\n                .map(post => <Post key={post.id}\r\n                                   id={post.id}\r\n                                   message={post.message}\r\n                                   likes={post.likes}/>)\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo'\r\nimport {MyPosts} from './MyPosts/MyPosts'\r\nimport {useAppDispatch, useAppSelector} from '../../../hooks/hooks'\r\nimport {Navigate, useParams} from 'react-router-dom'\r\nimport {getStatus, getUserProfile} from '../../../redux/profileReducer'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {getIsAuth} from '../../../redux/authSelectors'\r\n\r\n\r\nexport const ProfileForRedirect = () => {\r\n    const dispatch = useAppDispatch()\r\n    const params = useParams()\r\n    const isAuth = useAppSelector(getIsAuth)\r\n\r\n    let {userId} = params\r\n    userId && dispatch(getUserProfile(+userId))\r\n    userId && dispatch(getStatus(+userId))\r\n\r\n    if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo/>\r\n            <MyPosts/>\r\n        </div>\r\n    )\r\n}\r\nexport default withAuthRedirect(ProfileForRedirect)\r\n"],"names":["getPosts","state","profilePage","posts","getProfile","profile","getStatus","status","ProfileStatus","dispatch","useAppDispatch","useAppSelector","useState","editMode","setEditMode","value","setValue","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatus","ProfileInfo","authUserId","getId","userId","useParams","Preload","src","photos","large","mainPhoto","alt","className","styles","Number","type","target","files","length","updatePhoto","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","NewPost","s","AddNewPostFormRedux","onSubmit","formData","addPostAC","newPostText","reset","reduxForm","form","props","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","maxLength300","Post","React","id","message","likes","onClick","deletePostAC","MyPosts","reverse","post","ProfileForRedirect","params","isAuth","getIsAuth","getUserProfile","to","withAuthRedirect"],"sourceRoot":""}