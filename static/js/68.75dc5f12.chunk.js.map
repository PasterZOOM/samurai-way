{"version":3,"file":"static/js/68.75dc5f12.chunk.js","mappings":"iNACA,EAA0B,yBAA1B,EAAiE,6BAAjE,EAA0I,0BCA1I,EAAyB,uB,mBCIZA,EAA+BC,EAAAA,MAAW,YAAiB,IAAfC,EAAc,EAAdA,GAAIC,EAAU,EAAVA,KACzD,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAI,YAAcJ,EAA3B,SAAgCC,SCP5C,EAA0B,yBCIbI,EAAiCN,EAAAA,MAAW,YAAoB,IAAlBC,EAAiB,EAAjBA,GAAIM,EAAa,EAAbA,QAC3D,OACI,gBAAKJ,UAAWC,EAAWH,GAAIA,EAA/B,SAAoCM,O,+ECL/BC,EAAa,SAACC,GAAD,OAA6BA,EAAMC,YAAYC,SAC5DC,EAAc,SAACH,GAAD,OAA6BA,EAAMC,YAAYG,U,oBCe7DC,EAAqB,WAC9B,IAAMC,GAAWC,EAAAA,EAAAA,KAEXC,GAASC,EAAAA,EAAAA,GAAeC,EAAAA,IACxBR,GAAUO,EAAAA,EAAAA,GAAeV,GACzBK,GAAWK,EAAAA,EAAAA,GAAeN,GAMhC,OAAKK,GAGD,iBAAKd,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKO,EAAQS,KAAI,SAAAC,GAAM,OAAI,SAACtB,EAAD,CACQE,GAAIoB,EAAOpB,GACXC,KAAMmB,EAAOnB,MAFRmB,EAAOpB,UAI/C,iBAAKE,UAAWC,EAAhB,UACKS,EAASO,KAAI,SAAAb,GAAO,OAAI,SAACD,EAAD,CACSL,GAAIM,EAAQN,GACZM,QAASA,EAAQA,SAFZA,EAAQN,QAG/C,SAACqB,EAAD,CAAqBC,SAjBX,SAACC,GACnBT,GAASU,EAAAA,EAAAA,IAAqBD,EAASE,iBACvCX,GAASY,EAAAA,EAAAA,IAAM,0BAeuCC,YAAa,sBAbnD,SAAC,KAAD,CAAUvB,GAAG,YAoC/BiB,GAAsBO,EAAAA,EAAAA,GAAwB,CAACC,KAAM,wBAA/BD,EAhBsC,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAChE,OACI,kBAAMR,SAAUQ,EAAhB,WACI,0BACI,SAACC,EAAA,EAAD,CAAO9B,KAAM,iBACN+B,UAAWC,EAAAA,EACXC,YAAa,cACbC,SAAU,CAACC,EAAAA,GAAUC,EAAAA,SAEhC,0BACI,qDAQhB,GAAeC,EAAAA,EAAAA,GAAiBzB","sources":["webpack://samurai-way/./src/components/Body/Dialogs/Dialogs.module.css?29e2","components/Body/Dialogs/Dialog/Dialog.module.css","components/Body/Dialogs/Dialog/Dialog.tsx","components/Body/Dialogs/Message/Message.module.css","components/Body/Dialogs/Message/Message.tsx","redux/dialogsSelectors.ts","components/Body/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__dyAW5\",\"dialogItems\":\"Dialogs_dialogItems__X79Sh\",\"active\":\"Dialogs_active__ZQCH5\",\"messages\":\"Dialogs_messages__tciLB\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__FmNYe\"};","import React from 'react'\r\nimport s from './Dialog.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {DialogType} from '../../../../redux/dialogsReducer'\r\n\r\nexport const Dialog: React.FC<DialogType> = React.memo(({id, name}) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + id}>{name}</NavLink>\r\n        </div>\r\n    )\r\n})","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__l7Wdj\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\nimport {MessageType} from '../../../../redux/dialogsReducer';\r\n\r\n\r\nexport const Message: React.FC<MessageType> = React.memo(({id, message}) => {\r\n    return (\r\n        <div className={s.message} id={id}>{message}</div>\r\n    )\r\n})","import {AppRootStateType} from './reduxStore'\r\n\r\nexport const getDialogs = (state: AppRootStateType) => state.dialogsPage.dialogs\r\nexport const getMessages = (state: AppRootStateType) => state.dialogsPage.messages","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport {Dialog} from './Dialog/Dialog'\r\nimport {Message} from './Message/Message'\r\nimport {Field, InjectedFormProps, reduxForm, reset} from 'redux-form'\r\nimport {useAppDispatch, useAppSelector} from '../../../hooks/hooks'\r\nimport {sendNewMessageBodyAC} from '../../../redux/dialogsReducer'\r\nimport {maxLength300, required} from '../../../utils/validators/validators'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect'\r\nimport {Textarea} from '../../common/FormsControls/FormsControls'\r\nimport {getDialogs, getMessages} from '../../../redux/dialogsSelectors'\r\nimport {Navigate} from 'react-router-dom'\r\nimport {getIsAuth} from '../../../redux/authSelectors'\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const DialogsForRedirect = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isAuth = useAppSelector(getIsAuth)\r\n    const dialogs = useAppSelector(getDialogs)\r\n    const messages = useAppSelector(getMessages)\r\n\r\n    const addNewMessage = (formData: FormDataType) => {\r\n        dispatch(sendNewMessageBodyAC(formData.newMessageBody))\r\n        dispatch(reset('dialogAddMessageForm'))\r\n    }\r\n    if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogs.map(dialog => <Dialog key={dialog.id}\r\n                                               id={dialog.id}\r\n                                               name={dialog.name}/>)}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messages.map(message => <Message key={message.id}\r\n                                                  id={message.id}\r\n                                                  message={message.message}/>)}\r\n                <AddMessageFormRedux onSubmit={addNewMessage} clearSubmit={() => {\r\n                }}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field name={'newMessageBody'}\r\n                       component={Textarea}\r\n                       placeholder={'New Message'}\r\n                       validate={[required, maxLength300]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default withAuthRedirect(DialogsForRedirect)"],"names":["Dialog","React","id","name","className","s","to","Message","message","getDialogs","state","dialogsPage","dialogs","getMessages","messages","DialogsForRedirect","dispatch","useAppDispatch","isAuth","useAppSelector","getIsAuth","map","dialog","AddMessageFormRedux","onSubmit","formData","sendNewMessageBodyAC","newMessageBody","reset","clearSubmit","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","required","maxLength300","withAuthRedirect"],"sourceRoot":""}